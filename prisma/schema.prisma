
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  OPEN
  CLOSED
}

model User {
  id            String    @id @default(cuid())
  firstName     String?   
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  registered    Boolean @default(false)
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  emailOld      String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  otpEnabled    Boolean @default(false)
  otpVerified   Boolean @default(false)
  otpBase32     String?
  otpAuthUrl    String?
  otpBackups    String[]
  twoFactorConfirmation TwoFactorConfirmation?
  meetings      Meeting[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RegistrationToken {
  id String @id @default(cuid())
  email String
  token String @unique

  @@unique([email, token])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Meeting {
  id        String    @id @default(cuid())
  date      String
  location  String
  status    Status @default(OPEN)
  quaich    String?
  whiskies  Whisky[]
  users     User[]
}

model Whisky {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String? 
  quaich      Boolean
  order       Int?
  meeting     Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId   String
  reviews     Review[]
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  rating    Decimal
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  whisky    Whisky  @relation(fields: [whiskyId], references: [id], onDelete: Cascade)
  whiskyId  String
}