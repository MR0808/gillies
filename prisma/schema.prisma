generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  OPEN
  CLOSED
}

model User {
  id            String  @id @default(cuid())
  name          String
  lastName      String
  email         String  @unique
  image         String?
  emailVerified Boolean

  role              UserRole            @default(USER)
  sessions          Session[]
  accounts          Account[]
  reviews           Review[]
  meetings          Meeting[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  EmailChangeRecord EmailChangeRecord[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId             String
  providerId            String
  accesstoken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  hashAlgo              String    @default("argon2")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model RegistrationToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  @@unique([email, token])
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Meeting {
  id       String   @id @default(cuid())
  date     String
  location String
  status   Status   @default(OPEN)
  quaich   String?
  whiskies Whisky[]
  users    User[]

  @@index([date], name: "idx_meeting_date")
}

model EmailChangeRecord {
  id        String   @id @default(cuid())
  email     String // current email
  newEmail  String   @map("new_email") // new email to verify
  otp       String
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emailChangeRecords")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., 'email_change:user_id'
  count     Int      @default(0)
  resetTime DateTime @map("reset_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rateLimits")
}

model Whisky {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  quaich      Boolean  @default(false)
  order       Int      @default(0)
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId   String
  reviews     Review[]
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  whisky    Whisky   @relation(fields: [whiskyId], references: [id], onDelete: Cascade)
  whiskyId  String
}
